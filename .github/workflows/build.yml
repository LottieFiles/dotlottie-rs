name: Build Artifacts

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: "Target to build"
        required: true
        options:
          - "apple"
          - "android"
          - "wasm"
          - "all"
      feature_threads:
        type: boolean
        description: "Enable Threads (for thorvg)"
        required: false
        default: true
      feature_webp:
        type: boolean
        description: "Enable WebP Loader"
        required: false
        default: true
      feature_png:
        type: boolean
        description: "Enable PNG Loader"
        required: false
        default: true
      feature_jpg:
        type: boolean
        description: "Enable JPEG Loader"
        required: false
        default: true
      feature_ttf:
        type: boolean
        description: "Enable TTF Loader"
        required: false
        default: true
      feature_expressions:
        type: boolean
        description: "Enable Lottie Expressions"
        required: false
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.target }}
  cancel-in-progress: true

jobs:
  build-apple:
    runs-on: macos-latest-large
    if: github.event.inputs.target == 'apple' || github.event.inputs.target == 'all'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/rust-toolchain@nightly

      - name: Setup Apple
        run: make apple-setup

      - name: Setup signing
        run: |
          # Create temporary keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Add to search list
          security list-keychains -d user -s build.keychain login.keychain

          # Import certificate (suppress all output)
          echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -A > /dev/null 2>&1

          # Set partition list with more permissive settings
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Unlock again to ensure access
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Set signing identity
          CODESIGN_IDENTITY=$(security find-identity -v build.keychain | grep -E "(Developer ID|Apple Development)" | head -1 | sed 's/.*"\(.*\)"/\1/')
          echo "CODESIGN_IDENTITY=$CODESIGN_IDENTITY" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}" >> $GITHUB_ENV


          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "No codesigning identity found!"
            exit 1
          fi

          echo "Successfully configured signing certificate"
          rm certificate.p12

      - name: Set Features
        run: |
          features=""

          if [ "${{ github.event.inputs.feature_threads }}" = "true" ]; then
            features="${features}tvg-threads,"
          fi

          if [ "${{ github.event.inputs.feature_webp }}" = "true" ]; then
            features="${features}tvg-webp,"
          fi

          if [ "${{ github.event.inputs.feature_png }}" = "true" ]; then
            features="${features}tvg-png,"
          fi

          if [ "${{ github.event.inputs.feature_jpg }}" = "true" ]; then
            features="${features}tvg-jpg,"
          fi

          if [ "${{ github.event.inputs.feature_ttf }}" = "true" ]; then
            features="${features}tvg-ttf,"
          fi

          if [ "${{ github.event.inputs.feature_expressions }}" = "true" ]; then
            features="${features}tvg-lottie-expressions,"
          fi

          # Remove trailing comma if features exist
          if [ -n "$features" ]; then
            features="${features%,}"
          fi

          echo "FEATURES=$features" >> $GITHUB_ENV
          echo "Selected features: $features"

      - name: Build Apple
        run: make apple
        env:
          FEATURES: ${{ env.FEATURES }}

      - name: Create Apple Archive
        run: |
          cd release/apple
          tar -czf dotlottie-player.darwin.tar.gz *

      - name: Upload Apple Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotlottie-player.darwin.tar.gz
          path: release/apple/dotlottie-player.darwin.tar.gz
          if-no-files-found: error

      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true

  build-android:
    runs-on: ubuntu-latest
    if: github.event.inputs.target == 'android' || github.event.inputs.target == 'all'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
      - uses: nttld/setup-ndk@v1.5.0
        id: setup-ndk
        with:
          ndk-version: r28b
          local-cache: true

      - name: Setup Android
        run: make android-setup

      - name: Set Features
        run: |
          features=""

          if [ "${{ github.event.inputs.feature_webp }}" = "true" ]; then
            features="${features}tvg-webp,"
          fi

          if [ "${{ github.event.inputs.feature_png }}" = "true" ]; then
            features="${features}tvg-png,"
          fi

          if [ "${{ github.event.inputs.feature_jpg }}" = "true" ]; then
            features="${features}tvg-jpg,"
          fi

          if [ "${{ github.event.inputs.feature_ttf }}" = "true" ]; then
            features="${features}tvg-ttf,"
          fi

          if [ "${{ github.event.inputs.feature_expressions }}" = "true" ]; then
            features="${features}tvg-lottie-expressions,"
          fi

          # Remove trailing comma if features exist
          if [ -n "$features" ]; then
            features="${features%,}"
          fi

          echo "FEATURES=$features" >> $GITHUB_ENV
          echo "Selected features: $features"

      - name: Build Android
        run: make android
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          FEATURES: ${{ env.FEATURES }}

      - name: Check ELF Alignment
        run: ./scripts/check_elf_alignment.sh release/android/dotlottie-player/src/main/jniLibs

      - name: Create Android Archive
        run: |
          cd release/android
          tar -czf dotlottie-player.android.tar.gz *

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotlottie-player.android.tar.gz
          path: release/android/dotlottie-player.android.tar.gz
          if-no-files-found: error

  build-wasm:
    runs-on: ubuntu-latest
    if: github.event.inputs.target == 'wasm' || github.event.inputs.target == 'all'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: dtolnay/rust-toolchain@nightly
      - name: Setup WASM
        run: make wasm-setup

      - name: Set Features
        run: |
          features=""

          if [ "${{ github.event.inputs.feature_webp }}" = "true" ]; then
            features="${features}tvg-webp,"
          fi

          if [ "${{ github.event.inputs.feature_png }}" = "true" ]; then
            features="${features}tvg-png,"
          fi

          if [ "${{ github.event.inputs.feature_jpg }}" = "true" ]; then
            features="${features}tvg-jpg,"
          fi

          if [ "${{ github.event.inputs.feature_ttf }}" = "true" ]; then
            features="${features}tvg-ttf,"
          fi

          if [ "${{ github.event.inputs.feature_expressions }}" = "true" ]; then
            features="${features}tvg-lottie-expressions,"
          fi

          # Remove trailing comma if features exist
          if [ -n "$features" ]; then
            features="${features%,}"
          fi

          echo "FEATURES=$features" >> $GITHUB_ENV
          echo "Selected features: $features"

      - name: Build WASM
        run: make wasm
        env:
          FEATURES: ${{ env.FEATURES }}

      - name: Create WASM Archive
        run: |
          cd release/wasm
          tar -czf dotlottie-player.wasm.tar.gz *

      - name: Upload WASM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotlottie-player.wasm.tar.gz
          path: release/wasm/dotlottie-player.wasm.tar.gz
          if-no-files-found: error
