name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-apple:
    runs-on: macos-latest-large
    if: github.head_ref == 'release' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
      - uses: Homebrew/actions/setup-homebrew@master
      - uses: ningenMe/setup-rustup@v1.1.0

      - name: Install Make
        run: brew install make

      - name: Setup signing
        run: |
          # Create temporary keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Add to search list
          security list-keychains -d user -s build.keychain login.keychain

          # Import certificate (suppress all output)
          echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -A > /dev/null 2>&1

          # Set partition list with more permissive settings
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Unlock again to ensure access
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Set signing identity
          CODESIGN_IDENTITY=$(security find-identity -v build.keychain | grep -E "(Developer ID|Apple Development)" | head -1 | sed 's/.*"\(.*\)"/\1/')
          echo "CODESIGN_IDENTITY=$CODESIGN_IDENTITY" >> $GITHUB_ENV
          echo "SHOULD_SIGN=true" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}" >> $GITHUB_ENV

          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "No codesigning identity found!"
            exit 1
          fi

          echo "Successfully configured signing certificate"
          rm certificate.p12

      - name: Build Setup
        run: make mac-setup
        env:
          TARGET: apple

      - name: Build Apple
        run: make apple

      - name: Upload Apple Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotlottie-player.darwin.tar.gz
          path: release/apple/dotlottie-player.darwin.tar.gz
          if-no-files-found: error
      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
          
  build-android:
    runs-on: macos-latest
    if: github.head_ref == 'release' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
      - uses: Homebrew/actions/setup-homebrew@master
      - uses: ningenMe/setup-rustup@v1.1.0

      - name: Install Make
        run: brew install make

      - name: Build Setup
        run: make mac-setup
        env:
          TARGET: android

      - name: Build Android
        run: make android
        env:
          ANDROID_NDK_HOME: "/opt/homebrew/share/android-ndk"

      - name: Check ELF Alignment
        run: ./scripts/check_elf_alignment.sh release/android/dotlottie-player/src/main/jniLibs

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: dotlottie-player.android.tar.gz
          path: release/android/dotlottie-player.android.tar.gz
          if-no-files-found: error

  build-wasm:
    runs-on: macos-latest
    if: github.head_ref == 'release' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
      - uses: Homebrew/actions/setup-homebrew@master
      - uses: ningenMe/setup-rustup@v1.1.0

      - name: Install Binaryen
        run: brew install binaryen

      - name: Install Make
        run: brew install make

      - name: Build Setup
        run: make mac-setup
        env:
          TARGET: wasm

      - name: Build WASM
        run: make wasm

      - name: Optimize WASM
        run: wasm-opt release/wasm/DotLottiePlayer.wasm -o release/wasm/DotLottiePlayer.wasm -all -Oz

      - name: Upload WASM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotlottie-player.wasm.tar.gz
          path: release/wasm/dotlottie-player.wasm.tar.gz
          if-no-files-found: error

  release:
    needs: [build-apple, build-android, build-wasm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4.1.7
        with:
          path: release
          merge-multiple: true
      - name: Install Knope
        uses: knope-dev/action@v2.0.0
        with:
          version: 0.13.0
      - run: knope release --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
