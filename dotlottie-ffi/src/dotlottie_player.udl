namespace dotlottie_player {
    Layout create_default_layout();
    Config create_default_config();
    OpenURL create_default_open_url();
};

[Trait, WithForeign]
interface Observer {
    void on_load();
    void on_load_error();
    void on_play();
    void on_pause();
    void on_stop();
    void on_frame(f32 frame_no);
    void on_render(f32 frame_no);
    void on_loop(u32 loop_count);
    void on_complete();
};

[Trait, WithForeign]
interface StateMachineObserver {
    void on_transition(string previous_state, string new_state);
    void on_state_entered(string entering_state);
    void on_state_exit(string leaving_state);
    void on_custom_event(string message);
    void on_error(string message);
    void on_start();
    void on_stop();
    void on_string_trigger_value_change(string trigger_name, string old_value, string new_value);
    void on_numeric_trigger_value_change(string trigger_name, f32 old_value, f32 new_value);
    void on_boolean_trigger_value_change(string trigger_name, boolean old_value, boolean new_value);
    void on_trigger_fired(string trigger_name);
};

enum Mode {
    "Forward",
    "Reverse",
    "Bounce",
    "ReverseBounce"
};

enum Fit {
    "Contain",
    "Fill",
    "Cover",
    "FitWidth",
    "FitHeight",
    "None",
};

dictionary Layout {
    Fit fit;
    sequence<f32> align;
};

enum OpenURLMode {
    "Deny",
    "Interaction",
    "Allow",
};

dictionary OpenURL {
    OpenURLMode mode;
    sequence<string> whitelist;
};

dictionary Config {
    boolean autoplay;
    boolean loop_animation;
    Mode mode;
    f32 speed;
    boolean use_frame_interpolation;
    sequence<f32> segment;
    u32 background_color;
    Layout layout;
    string marker;
    string theme_id;
    string state_machine_id;
};

dictionary ManifestInitial {
    string? animation;
    string? state_machine;
};

dictionary ManifestAnimation {
    string id;
    string? name;
    string? initial_theme;
    sequence<string>? themes;
    string? background;
};

dictionary ManifestTheme {
    string id;
    string? name;
};

dictionary ManifestStateMachine {
    string id;
    string? name;
};

dictionary Manifest {
    string? version;
    string? generator;
    ManifestInitial? initial;
    sequence<ManifestAnimation> animations;
    sequence<ManifestTheme>? themes;
    sequence<ManifestStateMachine>? state_machines;
};

dictionary Marker {
    string name;
    f32 time;
    f32 duration;
};

[Enum]
interface Event {
    PointerDown(f32 x, f32 y);
    PointerUp(f32 x, f32 y);
    PointerMove(f32 x, f32 y);
    PointerEnter(f32 x, f32 y);
    PointerExit(f32 x, f32 y);
    Click(f32 x, f32 y);
    OnComplete();
    OnLoopComplete();

};

interface DotLottiePlayer {
    constructor(Config config);
    boolean load_animation_data([ByRef] string animation_data, u32 width, u32 height);
    boolean load_animation_path([ByRef] string animation_path, u32 width, u32 height);
    boolean load_dotlottie_data([ByRef] bytes file_data, u32 width, u32 height);
    boolean load_animation([ByRef] string animation_id, u32 width, u32 height);
    Manifest? manifest();
    string manifest_string();
    u64 buffer_ptr();
    u64 buffer_len();
    void set_config(Config config);
    Config config();
    f32 total_frames();
    f32 duration();
    f32 current_frame();
    u32 loop_count();
    boolean is_loaded();
    boolean is_playing();
    boolean is_paused();
    boolean is_stopped();
    boolean play();
    boolean pause();
    boolean stop();
    f32 request_frame();
    boolean set_frame(f32 no);
    boolean seek(f32 no);
    boolean render();
    boolean resize(u32 width, u32 height);
    void clear();
    void subscribe(Observer observer);
    void unsubscribe([ByRef] Observer observer);
    boolean is_complete();
    boolean set_theme([ByRef] string theme_id);
    boolean set_theme_data([ByRef] string theme_data);
    boolean reset_theme();
    boolean set_slots([ByRef] string slots);
    sequence<Marker> markers();
    string active_animation_id();
    string active_theme_id();
    boolean set_viewport(i32 x, i32 y, i32 w, i32 h);
    f32 segment_duration();
    sequence<f32> animation_size();
    sequence<f32> get_layer_bounds([ByRef] string layer_name);

    boolean state_machine_load([ByRef] string state_machine_id);
    boolean state_machine_load_data([ByRef] string state_machine);
    boolean state_machine_start(OpenURL open_url);
    boolean state_machine_stop();
    string active_state_machine_id();
    sequence<string> state_machine_framework_setup();
    i32 state_machine_post_event([ByRef] Event event);
    i32 state_machine_post_click_event(f32 x, f32 y);
    i32 state_machine_post_pointer_down_event(f32 x, f32 y);
    i32 state_machine_post_pointer_up_event(f32 x, f32 y);
    i32 state_machine_post_pointer_move_event(f32 x, f32 y);
    i32 state_machine_post_pointer_enter_event(f32 x, f32 y);
    i32 state_machine_post_pointer_exit_event(f32 x, f32 y);
    void state_machine_fire_event([ByRef] string event);
    boolean state_machine_set_boolean_trigger([ByRef] string key, boolean value);
    boolean state_machine_set_string_trigger([ByRef] string key, [ByRef] string value);
    boolean state_machine_set_numeric_trigger([ByRef] string key, f32 value);
    string get_state_machine([ByRef] string state_machine_id);
    f32 state_machine_get_numeric_trigger([ByRef] string key);
    string state_machine_get_string_trigger([ByRef] string key);
    boolean state_machine_get_boolean_trigger([ByRef] string key);
    string state_machine_current_state();
    boolean state_machine_subscribe(StateMachineObserver observer);
    boolean state_machine_unsubscribe([ByRef] StateMachineObserver observer);
    boolean state_machine_override_current_state([ByRef] string state_name, boolean do_tick);
    string state_machine_status();
};
