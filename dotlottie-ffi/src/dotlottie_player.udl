namespace dotlottie_player {
    Layout create_default_layout();
    Config create_default_config();
};

[Trait, WithForeign]
interface Observer {
    void on_load();
    void on_load_error();
    void on_play();
    void on_pause();
    void on_stop();
    void on_frame(f32 frame_no);
    void on_render(f32 frame_no);
    void on_loop(u32 loop_count);
    void on_complete();
};

[Trait, WithForeign]
interface StateMachineObserver {
    void on_transition(string previous_state, string new_state);
    void on_state_entered(string entering_state);
    void on_state_exit(string leaving_state);
};

enum Mode {
    "Forward",
    "Reverse",
    "Bounce",
    "ReverseBounce"
};

enum Fit {
    "Contain",
    "Fill",
    "Cover",
    "FitWidth",
    "FitHeight",
    "None",
};

dictionary Layout {
    Fit fit;
    sequence<f32> align;
};

dictionary Config {
    boolean autoplay;
    boolean loop_animation;
    Mode mode;
    f32 speed;
    boolean use_frame_interpolation;
    sequence<f32> segment;
    u32 background_color;
    Layout layout;
    string marker;
};

dictionary ManifestInitial {
    string? animation;
    string? state_machine;
};

dictionary ManifestAnimation {
    string id;
    string? name;
    string? initial_theme;
    sequence<string>? themes;
    string? background;
};

dictionary ManifestTheme {
    string id;
    string? name;
};

dictionary ManifestStateMachine {
    string id;
    string? name;
};

dictionary Manifest {
    string? version;
    string? generator;
    ManifestInitial? initial;
    sequence<ManifestAnimation> animations;
    sequence<ManifestTheme>? themes;
    sequence<ManifestStateMachine>? state_machines;
};

dictionary Marker {
    string name;
    f32 time;
    f32 duration;
};

[Enum]
interface Event {
    Bool(boolean value);
    String(string value);
    Numeric(f32 value);
    OnPointerDown(f32 x, f32 y);
    OnPointerUp(f32 x, f32 y);
    OnPointerMove(f32 x, f32 y);
    OnPointerEnter(f32 x, f32 y);
    OnPointerExit(f32 x, f32 y);
    OnComplete();
    SetNumericContext(string key, f32 value);
};

interface DotLottiePlayer {
    constructor(Config config);
    boolean load_animation_data([ByRef] string animation_data, u32 width, u32 height);
    boolean load_animation_path([ByRef] string animation_path, u32 width, u32 height);
    boolean load_dotlottie_data([ByRef] bytes file_data, u32 width, u32 height);
    boolean load_animation([ByRef] string animation_id, u32 width, u32 height);
    Manifest? manifest();
    string manifest_string();
    u64 buffer_ptr();
    u64 buffer_len();
    void set_config(Config config);
    Config config();
    f32 total_frames();
    f32 duration();
    f32 current_frame();
    u32 loop_count();
    boolean is_loaded();
    boolean is_playing();
    boolean is_paused();
    boolean is_stopped();
    boolean play();
    boolean pause();
    boolean stop();
    f32 request_frame();
    boolean set_frame(f32 no);
    boolean seek(f32 no);
    boolean render();
    boolean resize(u32 width, u32 height);
    void clear();
    void subscribe(Observer observer);
    void unsubscribe([ByRef] Observer observer);
    boolean is_complete();
    boolean load_theme([ByRef] string theme_id);
    boolean load_theme_data([ByRef] string theme_data);
    sequence<Marker> markers();
    string active_animation_id();
    string active_theme_id();
    boolean set_viewport(i32 x, i32 y, i32 w, i32 h);
    f32 segment_duration();
    sequence<f32> animation_size();
    sequence<f32> get_layer_bounds([ByRef] string layer_name);

    boolean load_state_machine([ByRef] string str);
    boolean start_state_machine();
    boolean stop_state_machine();
    i32 post_event([ByRef] Event event);
    boolean state_machine_subscribe(StateMachineObserver observer);
    boolean state_machine_unsubscribe(StateMachineObserver observer);
    boolean set_state_machine_numeric_context([ByRef] string key, f32 value);
    boolean set_state_machine_string_context([ByRef] string key, [ByRef] string value);
    boolean set_state_machine_boolean_context([ByRef] string key, boolean value);
    sequence<string> state_machine_framework_setup();
    boolean load_state_machine_data([ByRef] string state_machine);

    i32 post_bool_event(boolean value);
    i32 post_string_event([ByRef] string value);
    i32 post_numeric_event(f32 value);
    i32 post_pointer_down_event(f32 x, f32 y);
    i32 post_pointer_up_event(f32 x, f32 y);
    i32 post_pointer_move_event(f32 x, f32 y);
    i32 post_pointer_enter_event(f32 x, f32 y);
    i32 post_pointer_exit_event(f32 x, f32 y);
    i32 post_set_numeric_context([ByRef] string key, f32 value);
};
