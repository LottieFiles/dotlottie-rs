namespace dotlottie_player {
    Layout create_default_layout();
    Config create_default_config();
};

enum Mode {
    "Forward",
    "Reverse",
    "Bounce",
    "ReverseBounce"
};

enum Fit {
    "Contain",
    "Fill",
    "Cover",
    "FitWidth",
    "FitHeight",
    "None",
};

dictionary Layout {
    Fit fit;
    sequence<f32> align;
};

dictionary Config {
    boolean autoplay;
    boolean loop_animation;
    Mode mode;
    f32 speed;
    boolean use_frame_interpolation;
    sequence<f32> segment;
    u32 background_color;
    Layout layout;
    string marker;
};

dictionary Marker {
    string name;
    f32 time;
    f32 duration;
};

interface DotLottiePlayer {
    constructor(Config config);
    boolean load_animation_data([ByRef] string animation_data, u32 width, u32 height);
    boolean load_animation_path([ByRef] string animation_path, u32 width, u32 height);
    boolean load_dotlottie_data([ByRef] bytes file_data, u32 width, u32 height);
    boolean load_animation([ByRef] string animation_id, u32 width, u32 height);
    string manifest_string();
    u64 buffer_ptr();
    u64 buffer_len();
    void set_config(Config config);
    Config config();
    f32 total_frames();
    f32 duration();
    f32 current_frame();
    u32 loop_count();
    boolean is_loaded();
    boolean is_playing();
    boolean is_paused();
    boolean is_stopped();
    boolean play();
    boolean pause();
    boolean stop();
    f32 request_frame();
    boolean set_frame(f32 no);
    boolean seek(f32 no);
    boolean render();
    boolean resize(u32 width, u32 height);
    void clear();
    boolean is_complete();
    boolean load_theme([ByRef] string theme_id);
    boolean load_theme_data([ByRef] string theme_data);
    sequence<Marker> markers();
    string active_animation_id();
    string active_theme_id();
    boolean set_viewport(i32 x, i32 y, i32 w, i32 h);
    f32 segment_duration();
    sequence<f32> animation_size();
    sequence<f32> get_layer_bounds([ByRef] string layer_name);
    
    boolean state_machine_load([ByRef] string state_machine_id);
    boolean state_machine_load_data([ByRef] string state_machine);
    boolean state_machine_start();
    boolean state_machine_stop();
    sequence<string> state_machine_framework_setup();
    i32 state_machine_post_pointer_down_event(f32 x, f32 y);
    i32 state_machine_post_pointer_up_event(f32 x, f32 y);
    i32 state_machine_post_pointer_move_event(f32 x, f32 y);
    i32 state_machine_post_pointer_enter_event(f32 x, f32 y);
    i32 state_machine_post_pointer_exit_event(f32 x, f32 y);
    void state_machine_fire_event([ByRef] string event);
    string state_machine_current_state();
    boolean state_machine_set_boolean_trigger([ByRef] string key, boolean value);
    boolean state_machine_set_string_trigger([ByRef] string key, [ByRef] string value);
    boolean state_machine_set_numeric_trigger([ByRef] string key, f32 value);
};
